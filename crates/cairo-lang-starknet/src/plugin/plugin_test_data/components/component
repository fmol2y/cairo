//! > Test expansion of a basic component.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::component]
mod component {
    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[includable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data
        }
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.data = value;
        }
    }
}
trait MyTrait<T> {
    fn get_data(self: @T, addr: ContractAddress) -> u32;
    fn set_data(ref self: T, addr: ContractAddress, value: u32);
}

//! > generated_cairo_code
lib.cairo:

#[starknet::component]
mod component {
    #[storage]
    struct Storage {
        data: u32,
        map: LegacyMap<u32, u32>
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        Log: Log,
    }
    #[derive(Drop, starknet::Event)]
    struct Log {}

    #[includable_as(MyImpl)]
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
            self.data
        }
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
            self.data = value;
        }
    }
}
trait MyTrait<T> {
    fn get_data(self: @T, addr: ContractAddress) -> u32;
    fn set_data(ref self: T, addr: ContractAddress, value: u32);
}

component:

use starknet::event::EventEmitter;

    impl ComponentStateEventEmitter<TCS> of EventEmitter<ComponentState<TCS>, Event> {
        fn emit<S, impl IntoImp: traits::Into<S, Event>>(ref self: ComponentState<TCS>, event: S) {
            let event: Event = traits::Into::into(event);
            let mut keys = Default::<array::Array>::default();
            let mut data = Default::<array::Array>::default();
            starknet::Event::append_keys_and_data(@event, ref keys, ref data);
            starknet::SyscallResultTraitImpl::unwrap_syscall(
                starknet::syscalls::emit_event_syscall(
                    array::ArrayTrait::span(@keys),
                    array::ArrayTrait::span(@data),
                )
            )
        }
    }

    struct ComponentState<TCS> {
        data: data::ComponentMemberState,
        map: map::ComponentMemberState,
    }
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    #[inline(always)]
    fn unsafe_new_component_state<TCS>() -> ComponentState<TCS> {
        ComponentState::<TCS> {
            data: data::ComponentMemberState{},
            map: map::ComponentMemberState{},
        }
    }
    #[cfg(test)]
    #[inline(always)]
    fn component_state_for_testing<TCS>() -> ComponentState<TCS> {
        unsafe_new_component_state<TCS>()
    }
    
    use data::InternalComponentMemberStateTrait as dataComponentMemberStateTrait;
    mod data {
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState) -> u32;
            fn write(ref self: ComponentMemberState, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x354f1c2d0eb5771cd5bf67a6689fcd6eed9444d91a39e5ef32a9b4ae5ca14ff>()
            }
            fn read(self: @ComponentMemberState) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(),
                        value,
                    )
                )
            }
        }
    }
    use map::InternalComponentMemberStateTrait as mapComponentMemberStateTrait;
    mod map {
        use super::Event;
        use super::Log;
        use super::MyInnerImpl;
        #[derive(Copy, Drop)]
        struct ComponentMemberState {}
        trait InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState, key: u32) -> starknet::StorageBaseAddress;
            fn read(self: @ComponentMemberState, key: u32) -> u32;
            fn write(ref self: ComponentMemberState, key: u32, value: u32);
        }

        impl InternalComponentMemberStateImpl of InternalComponentMemberStateTrait {
            fn address(self: @ComponentMemberState, key: u32) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<u32>::hash(0x1af9e30ee4fed507d9432e0f1308eb5bd12221bef97071a48d86951102231be, key))
            }
            fn read(self: @ComponentMemberState, key: u32) -> u32 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::read(
                        address_domain,
                        self.address(key),
                    )
                )
            }
            fn write(ref self: ComponentMemberState, key: u32, value: u32) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::SyscallResultTraitImpl::unwrap_syscall(
                    starknet::Store::<u32>::write(
                        address_domain,
                        self.address(key),
                        value,
                    )
                )
            }
        }
    }
trait MyInnerImplTrait<TContractState> {
    fn get_data(self: @TContractState, addr: ContractAddress) -> u32;
    fn set_data(ref self: TContractState, addr: ContractAddress, value: u32);
}

impl MyImpl<TContractState, impl X: HasComponent<TContractState>, impl TContractStatePanicDestruct: PanicDestruct<TContractState>> of MyInnerImplTrait<TContractState> {
    fn get_data(self: @TContractState, addr: ContractAddress) -> u32 {
        let component = self.get_component();
        component.get_data(addr, )
    }
    fn set_data(ref self: TContractState, addr: ContractAddress, value: u32) {
        let mut component = self.get_component_mut();
        component.set_data(addr, value, )
    }
}


impls:

impl EventDrop of Drop::<Event>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_data(
        self: @Event, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
        match self {
            Event::Log(val) => {
                array::ArrayTrait::append(ref keys, 0x100572688f36e5f96cee69badc6dcd8712fa19d323be018601b92e967c60678);
                starknet::Event::append_keys_and_data(
                    val, ref keys, ref data
                );
            },
        }
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Event> {
        let selector = *array::SpanTrait::pop_front(ref keys)?;
        
            if selector == 0x100572688f36e5f96cee69badc6dcd8712fa19d323be018601b92e967c60678 {
                let val = starknet::Event::deserialize(
                    ref keys, ref data
                )?;
                return Option::Some(Event::Log(val));
            }
        Option::None
    }
}
impl EventLogIntoEvent of Into<Log, Event> {
    fn into(self: Log) -> Event {
        Event::Log(self)
    }
}



impls:

impl LogDrop of Drop::<Log>;


event_impl:

impl LogIsEvent of starknet::Event<Log> {
    fn append_keys_and_data(
        self: @Log, ref keys: Array<felt252>, ref data: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref data: Span<felt252>,
    ) -> Option<Log> {
        Option::Some(Log {})
    }
}

//! > expected_diagnostics
error: Type not found.
 --> lib.cairo:28:33
    fn get_data(self: @T, addr: ContractAddress) -> u32;
                                ^*************^

error: Type not found.
 --> lib.cairo:29:36
    fn set_data(ref self: T, addr: ContractAddress, value: u32);
                                   ^*************^

error: Trait not found.
 --> lib.cairo:18:79
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                                                              ^*****^

error: Not a trait.
 --> lib.cairo:18:79
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                                                              ^*************************************^

error: Trait not found.
 --> lib.cairo:18:46
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                             ^**********^

error: Trait has no implementation in context: core::traits::Into::<S, test::component::Event>
 --> component:5:46
            let event: Event = traits::Into::into(event);
                                             ^**^

error: Invalid drop trait implementation, Trait has no implementation in context: core::traits::Drop::<test::component::data::ComponentMemberState>.
 --> component:22:5
    impl ComponentStateDrop<TCS> of Drop<ComponentState<TCS>> {}
    ^**********************************************************^

error: Plugin diagnostic: Type not found.
 --> lib.cairo:19:66
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
                                                                 ^*************^

error: Plugin diagnostic: Type not found.
 --> lib.cairo:22:69
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
                                                                    ^*************^

error: Plugin diagnostic: Trait not found.
 --> lib.cairo:18:46
    impl MyInnerImpl<TContractState, impl X: HasComponent<TContractState>> of MyTrait<ComponentState<TContractState>> {
                                             ^**********^

error: Plugin diagnostic: Type not found.
 --> lib.cairo:19:66
        fn get_data(self: @ComponentState<TContractState>, addr: ContractAddress) -> u32 {
                                                                 ^*************^

error: Plugin diagnostic: Type not found.
 --> lib.cairo:22:69
        fn set_data(ref self: ComponentState<TContractState>, addr: ContractAddress, value: u32) {
                                                                    ^*************^

error: Invalid drop trait implementation, Trait has no implementation in context: core::traits::Drop::<test::component::Log>.
 --> impls:1:1
impl EventDrop of Drop::<Event>;
^******************************^

error: Trait has no implementation in context: core::array::ArrayTrait::<core::felt252>
 --> event_impl:7:36
                array::ArrayTrait::append(ref keys, 0x100572688f36e5f96cee69badc6dcd8712fa19d323be018601b92e967c60678);
                                   ^****^

error: Trait has no implementation in context: core::array::SpanTrait::<core::felt252>
 --> event_impl:17:43
        let selector = *array::SpanTrait::pop_front(ref keys)?;
                                          ^*******^

error: Mismatched types. The type core::integer::u32 cannot be created from a numeric literal.
 --> component:55:38
                let address_domain = 0_u32;
                                     ^***^

error: Mismatched types. The type core::integer::u32 cannot be created from a numeric literal.
 --> component:65:38
                let address_domain = 0_u32;
                                     ^***^

error: Variable not dropped.
 --> component:50:24
            fn address(self: @ComponentMemberState) -> starknet::StorageBaseAddress {
                       ^**^
note: Trait has no implementation in context: core::traits::Drop::<@test::component::data::ComponentMemberState>
note: Trait has no implementation in context: core::traits::Destruct::<@test::component::data::ComponentMemberState>

error: Trait has no implementation in context: core::hash::LegacyHash::<core::integer::u32>
 --> component:92:46
                    hash::LegacyHash::<u32>::hash(0x1af9e30ee4fed507d9432e0f1308eb5bd12221bef97071a48d86951102231be, key))
                                             ^**^

error: Mismatched types. The type core::integer::u32 cannot be created from a numeric literal.
 --> component:96:38
                let address_domain = 0_u32;
                                     ^***^

error: Mismatched types. The type core::integer::u32 cannot be created from a numeric literal.
 --> component:106:38
                let address_domain = 0_u32;
                                     ^***^
